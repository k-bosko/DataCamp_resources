Course: Data Driven Decision Marking with SQL
DataCamp

**********************************************

Aggregating revenue, rentals and active customers
The management of MovieNow wants to report key performance indicators (KPIs) for the performance of the company in 2018. They are interested in measuring the financial successes as well as user engagement. Important KPIs are, therefore, the profit coming from movie rentals, the number of movie rentals and the number of active customers.

SELECT
	SUM(m.renting_price),
	COUNT(*),
	COUNT(DISTINCT r.customer_id)
FROM renting AS r
LEFT JOIN movies AS m
ON r.movie_id = m.movie_id
-- Only look at movie rentals in 2018
WHERE date_renting BETWEEN '2018-01-01' AND '2018-12-31';


You've calculated a turnover of 658.02 and found the number of rentals to be 298 and the number of active users to be 93 in 2018.

****************************************************
How much income did each movie generate?
****************************************************
SELECT rm.title, -- Report the income from movie rentals for each movie
       SUM(rm.renting_price) AS income_movie
FROM
       (SELECT m.title,
               m.renting_price
       FROM renting AS r
       LEFT JOIN movies AS m
       ON r.movie_id=m.movie_id) AS rm
GROUP BY title
ORDER BY income_movie DESC; -- Order the result by decreasing income

*********************************************************************
Report the date of birth of the oldest and youngest US actor and actress.
*********************************************************************

SELECT gender,
	      MIN(a.year_of_birth),
        	      MAX(a.year_of_birth)
FROM
    (SELECT *
    FROM actors
    WHERE nationality = 'USA') AS a
GROUP BY gender

You learned that in the MovieNow actors' record the oldest actor was born in 1930 and the oldest actress in 1945.

*********************************************
Which is the most frequently rented movie on MovieNow?
Answer this question for a specific group of customers: for all customers born in the 70s.
***********************************************

1. Prepare Subquery
SELECT *
FROM renting AS r
LEFT JOIN customers AS c
    ON r.customer_id = c.customer_id
LEFT JOIN movies AS m
    ON r.movie_id = m.movie_id

2.

SELECT title,
	   COUNT(*)
FROM (SELECT *
    FROM renting AS r
    LEFT JOIN customers AS c
        ON r.customer_id = c.customer_id
    LEFT JOIN movies AS m
        ON r.movie_id = m.movie_id) AS rmc
WHERE rmc.date_of_birth BETWEEN '1970-01-01' AND '1979-12-31'
GROUP BY title
ORDER BY COUNT(*) DESC
LIMIT 1;
Bridget Jones - The Edge of Reason	6

**************************************************
Which is the favorite movie on MovieNow?
Answer this question for a specific group of customers: for all customers born in the 70s.
***************************************************

SELECT m.title,
COUNT(*),
AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE c.date_of_birth BETWEEN '1970-01-01' AND '1979-12-31'
GROUP BY m.title
HAVING COUNT(*) > 1 -- Remove movies with only one rental
ORDER BY AVG(r.rating) DESC; -- Order with highest rating first

*********************************
Identify favorite actors for Spain
*********************************

1. Prepare subquery
SELECT *
FROM renting AS r
LEFT JOIN customers AS c
    ON r.customer_id = c.customer_id
LEFT JOIN actsin
    ON r.movie_id = actsin.movie_id
LEFT JOIN actors AS a
    ON actsin.actor_id = a.actor_id


* 		Report the number of movie rentals and the average rating for each actor, separately for male and female customers.
* 		Report only actors with more than 5 movie rentals.


SELECT name,
      COUNT(*) AS number_rentals,
      AVG(rating) AS avg_rating,
      gender
FROM
    (SELECT c.gender, r.rating, a.name
    FROM renting AS r
    LEFT JOIN customers AS c
        ON r.customer_id = c.customer_id
    LEFT JOIN actsin
        ON r.movie_id = actsin.movie_id
    LEFT JOIN actors AS a
        ON actsin.actor_id = a.actor_id
    WHERE c.country = 'Spain') AS rca
GROUP BY name, gender
HAVING COUNT(*) > 5;

*********************
KPIs per country

Your manager is interested in the total number of movie rentals, the average rating of all movies and the total revenue for each country since the beginning of 2019.
**********************

SELECT c.country,
    COUNT(*) AS number_rentals,
    AVG(r.rating) AS avg_rating,
    SUM(m.renting_price) AS revenue
FROM renting AS r -- Augment the table renting with information about customers
LEFT JOIN movies AS m
    ON r.movie_id = m.movie_id
LEFT JOIN customers AS c -- Augment the table renting with information about movies
    ON r.customer_id = c.customer_id
WHERE r.date_renting >= '2019-01-01' -- Select only records about rentals since the beginning of 2019
GROUP BY c.country
ORDER BY revenue DESC;

**********************
Often rented movies
Report when > 5 rentals
**********************

1.
SELECT movie_id
FROM renting
GROUP BY movie_id
HAVING COUNT(*) > 5


2.
SELECT *
FROM movies
WHERE movie_id IN  -- Select movie IDs from the inner query
	(SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(*) > 5)

*****************************
Frequent customers
List all customer information for customers who rented more than 10 movies.
******************************

1.
SELECT c.customer_id
FROM customers AS c
LEFT JOIN renting AS r
    ON c.customer_id = r.customer_id
GROUP BY c.customer_id
HAVING COUNT(*) > 10;

2.
SELECT *
FROM customers
WHERE customer_id IN            -- Select all customers with more than 10 movie rentals
	(SELECT customer_id
	FROM renting
	GROUP BY customer_id
	HAVING COUNT(*) > 10);


********************************
Movies with rating above average
*******************************

SELECT title -- Report the movie titles of all movies with average rating higher than the total average
FROM movies
WHERE movie_id IN
	(SELECT movie_id
	 FROM renting
     GROUP BY movie_id
     HAVING AVG(rating) >
		(SELECT AVG(rating)
		 FROM renting));

*********************************
CORRELATED NESTED QUERIES:
Analyzing customer behavior

A new advertising campaign is going to focus on customers who rented fewer than 5 movies. Use a correlated query to extract all customer information for the customers of interest.
********************************

Excluding customers who never rented (going through all rentals first):

SELECT *
FROM customers
WHERE customer_id IN
    (SELECT customer_id
    FROM renting AS r
    GROUP BY customer_id
    HAVING COUNT(*) < 5);

Outputs 59 rows

————————————
Including customers who never rented (going through all customers first) with CORRELATED QUERY:

SELECT *
FROM customers as c
WHERE 5 >
	(SELECT count(*)
	FROM renting as r
	WHERE r.customer_id = c.customer_id);

Outputs 66 rows
The solver iterates through each row of table customers and evaluates the subquery of a given value of customer_id

******************************
Customers who gave low ratings
Identify customers who were not satisfied with movies they watched on MovieNow. Report a list of customers with minimum rating smaller than 4.
******************************
SELECT *
FROM customers AS c
WHERE 4 > (
    SELECT MIN(rating)
    FROM renting AS r
    WHERE r.customer_id = c.customer_id)

****************************
Report a list of movies that received the most attention on the movie platform, (i.e. report all movies with more than 5 ratings and all movies with an average rating higher than 8).
*******************************
1. Select all movies with more than 5 ratings
SELECT *
FROM movies AS m
WHERE 5 <
	(SELECT COUNT(rating)
	FROM renting AS r
	WHERE r.movie_id = m.movie_id);

2. Select all movies with an average rating > 8
SELECT *
FROM movies AS m
WHERE 8 <
	(SELECT AVG(rating)
	FROM renting AS r
	WHERE r.movie_id = m.movie_id);

3. Combine them with CTEs

WITH movies_5ratings AS (
    SELECT *
    FROM movies AS m
    WHERE 5 < -- Select all movies with more than 5 ratings
    	(SELECT COUNT(rating)
    	FROM renting AS r
    	WHERE r.movie_id = m.movie_id)),
    movies_avg_rating8 AS (
     SELECT *
     FROM movies AS m
     WHERE 8 < -- Select all movies with an average rating higher than 8
         (SELECT AVG(rating)
         FROM renting AS r
         WHERE r.movie_id = m.movie_id))
SELECT *
FROM movies_5ratings, movies_avg_rating8
WHERE movies_5ratings.movie_id = movies_avg_rating8.movie_id;

Output: 4 movies

****************************
Queries with EXISTS
***************************
special case of a correlated nested query
used to check if result of a correlated nested query is empty
returns TRUE or FALSE
TRUE = not empty -> row of the outer query is selected
FALSE = empty
Columns specified in SELECTT component not considred -> use SELECT * for the subquery

********************************
Movies with at least one rating
*******************************
SELECT *
FROM movies AS m
WHERE EXISTS
    (SELECT *
    FROM renting AS r
    WHERE rating IS NOT NULL
        AND r.movie_id = m.movie_id)

********************************
Customers with at least 1 rating
*******************************
SELECT *
FROM customers AS c  -- Select all customers with at least one rating
WHERE EXISTS
	(SELECT *
	FROM renting AS r
	WHERE rating IS NOT NULL
	AND r.customer_id = c.customer_id);

*******************************
Actors in comedies

In order to analyze the diversity of actors in comedies, first, report a list of actors who play in comedies and then, the number of actors for each nationality playing in comedies.
*******************************

SELECT a.nationality,
        COUNT(*)
FROM actors AS a
WHERE EXISTS
	(SELECT ai.actor_id
	 FROM actsin AS ai
	 LEFT JOIN movies AS m
	 ON m.movie_id = ai.movie_id
	 WHERE m.genre = 'Comedy'
	 AND ai.actor_id = a.actor_id)
GROUP BY a.nationality;

**********************
Young actors not coming from the USA
***********************************
SELECT name,
       nationality,
       year_of_birth
FROM actors
WHERE nationality <> 'USA'
INTERSECT
SELECT name,
       nationality,
       year_of_birth
FROM actors
WHERE year_of_birth > 1990;

**************************
Dramas with high ratings
***************************
SELECT *
FROM movies
WHERE movie_id IN
   (SELECT movie_id
    FROM movies
    WHERE genre = 'Drama'
    INTERSECT
    SELECT movie_id
    FROM renting
    GROUP BY movie_id
    HAVING AVG(rating)>9);

Answer: No Country for Old Men

************************
GROUP BY CUBE
*************************
pivot tables in SQL
CUBE is always preceded by GROUP BY clause

SELECT country,
       genre,
       COUNT(*)
FROM renting_extended
GROUP BY CUBE (country, genre);

here we group the data by each combination of country and genre + by country and by genre alone. Finally, we count all movie rentals in a table with the total aggregation

Output: long format

****************************
Groups of customers
total number of male and female customers from each country.
***********************************************************
SELECT gender, -- Extract information of a pivot table of gender and country for the number of customers
	   country,
	   COUNT(*)
FROM customers
GROUP BY CUBE (gender, country)
ORDER BY country;


************************
Categories of movies:
List the number of movies for different genres and release years.
*************************

SELECT genre,
       year_of_release,
       COUNT(*)
FROM movies
GROUP BY CUBE(genre, year_of_release)
ORDER BY year_of_release;


*************************
Analyzing average ratings

Prepare a table for a report about the national preferences of the customers from MovieNow comparing the average rating of movies across countries and genres.
*************************

SELECT
	c.country,
	m.genre,
	AVG(r.rating) AS avg_rating -- Calculate the average rating
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
GROUP BY CUBE (c.country, m.genre); -- For all aggregation levels of country and genre


***************************
ROLLUP
**************************
returns aggregates for a hierachy of values
always used with GROUP BY clause
the order of columns in () is important !!

SELECT country,
        genre,
        COUNT(*)
FROM renting_extended
GROUP BY ROLLUP (country, genre);

Levels of aggregations here:
- Aggregation of each combination of country and genre
- Aggregation of country alone
- Total aggregation

Difference with CUBE: the second column in ROLLUP is aggregated at only 1 level
in CUBE, however, all possible combinations of selected columns in () are shown


********************
Number of Customers
*******************
-- Count the total number of customers, the number of customers for each country, and the number of female and male customers for each country

SELECT country,
       gender,
	   COUNT(*)
FROM customers
GROUP BY ROLLUP (country, gender)
ORDER BY country, gender; -- Order the result by country and gender

********************
Analyzing preferences of genres across countries
**********************

-- Group by each county and genre with OLAP extension
SELECT
	c.country,
	m.genre,
	AVG(r.rating) AS avg_rating,
	COUNT(*) AS num_rating
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
GROUP BY ROLLUP (c.country, m.genre)
ORDER BY c.country, m.genre;

***************************
GROUP BY GROUPING SETS
****************************
returns a UNION over several GROUP BY queries
column names surrounded by () represent one level of aggregation

SELECT country,
        genre,
        COUNT(*)
FROM renting_extended
GROUP BY GROUPING SETS ((country, genre), (country), (genre), ());

here UNION ovre 4 queries
equivalent to GROUP BY CUBE (country, genre)

************************
Exploring nationality and gender of actors
We are interested in how much diversity there is in the nationalities of the actors and how many actors and actresses are in the list.
************************

SELECT
	nationality, -- Select nationality of the actors
    gender, -- Select gender of the actors
    COUNT(*) -- Count the number of actors
FROM actors
GROUP BY GROUPING SETS ((nationality), (gender), ());

************************
Exploring average rating by country and gender
****************************

SELECT
	c.country,
    c.gender,
	AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
-- Report all info from a Pivot table for country and gender
GROUP BY GROUPING SETS ((country, gender), (country), (gender), ());

************************
Customer preference for genres:
management considers investing money in movies of the best rated genres
************************
SELECT genre,
	   AVG(rating) AS avg_rating,
	   COUNT(rating) AS n_rating,
       COUNT(*) AS n_rentals,
	   COUNT(DISTINCT m.movie_id) AS n_movies
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE r.movie_id IN (
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >= 3 )
AND r.date_renting >= '2018-01-01'
GROUP BY genre
ORDER BY avg_rating DESC; -- Order the table by decreasing average rating

Output: Action&Adventure has the highes rating

************************
Customer preferences for actors
******************************
SELECT a.nationality,
       a.gender,
	   AVG(r.rating) AS avg_rating,
	   COUNT(r.rating) AS n_rating,
	   COUNT(*) AS n_rentals,
	   COUNT(DISTINCT a.actor_id) AS n_actors
FROM renting AS r
LEFT JOIN actsin AS ai
ON ai.movie_id = r.movie_id
LEFT JOIN actors AS a
ON ai.actor_id = a.actor_id
WHERE r.movie_id IN (
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >= 4)
AND r.date_renting >= '2018-04-01'
GROUP BY CUBE(a.nationality, a.gender); -- Provide results for all aggregation levels represented in a pivot table


